# Notes:
# - `dotnet test` does work for .NET Framework targets, but they still require mono on non-Windows.
#   `dotnet test` for .NET Core targets do not require mono (.NET Core is cross-platform).
# - `dotnet test HarmonyTests` won't run .NET Framework 3.5 tests, and `dotnet test HarmonyTests --framework net35` fails.
#   Both the dll and `--framework net35` must be specified: `dotnet test path/to/net35/HarmonyTests.dll --framework net35`.
#   Specifying both the dll and --framework also works for other .NET Framework/Core targets; it's only required for net35.
# - Even with the above workaround for running .NET Framework 3.5 tests, there is no CLR 2.0 runtime (or mono equivalent) available to properly test it.
#   Both `dotnet test path/to/net35/HarmonyTests.dll --framework net35` and `mono path/to/nunit3-console.exe path/to/net35/HarmonyTests.dll`
#   run the tests in 'CLR 4.0 "compatibility mode"' (or the mono equivalent of this).
# - Builds that use mono are currently very slow due to https://github.com/travis-ci/travis-ci/issues/4571

language: csharp
solution: HarmonyTests/HarmonyTests.csproj

os:
  - linux
  - osx

env:
  - netframework=net35
  - netframework=net45
  - netframework=net472
  - netframework=net48
  - netframework=netcoreapp3.0
  - netframework=netcoreapp3.1

mono:
  - latest
  - none

# "dotnet: 3.1" works fine for linux, but osx needs the exact version for some reason.
dotnet: 3.1.302

before_install:
  - if [ "$TRAVIS_COMMIT_MESSAGE" == "Update documentation" ]; then echo "Skipping documentation only commit" && exit; fi

install:
  - dotnet --version
  - dotnet restore

script:
  - dotnet build --configuration Release --framework ${netframework}
  # Need to specify both dll and --framework for net35 target, so might as well do it for all targets (netframework).
  - dotnet test HarmonyTests/bin/Release/${netframework}/HarmonyTests.dll --framework ${netframework} --logger 'console;verbosity=detailed'

jobs:
  exclude:
    # .NET Framework targets require mono on non-Windows machines, so exclude non-mono permutations
    # (otherwise, dotnet (vs)test outputs this error: Could not find 'mono' host. Make sure that 'mono' is installed on the machine and is available in PATH environment variable.)
    - env: netframework=net35
      mono: none
    - env: netframework=net45
      mono: none
    - env: netframework=net472
      mono: none
    - env: netframework=net48
      mono: none
    # .NET Core targets don't require mono, so exclude mono permutations
    - env: netframework=netcoreapp3.0
      mono: latest
    - env: netframework=netcoreapp3.1
      mono: latest

notifications:
  email: false
